{"version":3,"sources":["components/TodoListTemplates.js","components/form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplates","_ref","form","children","react_default","a","createElement","className","Form","value","onChange","onCreate","onKeyPress","onClick","TodoItem","nextProps","nextState","this","props","checked","_this$props","text","id","onToggle","onRemove","e","stopPropagation","concat","Component","TodoItemList","todos","todoList","map","src_components_TodoItem","key","App","state","input","handleToggle","_this","index","findIndex","todo","selected","nextTodos","Object","toConsumableArray","objectSpread","setState","handleChange","target","handleCreate","_this$state","handleKeyPress","handleRemove","filter","_this$state2","src_components_TodoListTemplates","src_components_form","components_TodoItemList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c69fbd2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoListTemplates.css';\n\nconst TodoListTemplates = ({form, children}) => {\n    return (\n        <main className=\"todo-list-templates\">\n            <div className=\"title\">\n                오늘 할 일\n            </div>\n            <section className=\"form-wrapper\">\n                {form}\n            </section>\n            <section className=\"todos-wrapper\">\n                {children}\n            </section>\n        </main>\n    )\n}\n\nexport default TodoListTemplates;","import React from 'react';\nimport './form.css';\n\nconst Form = ({value, onChange, onCreate, onKeyPress}) => {\n    return (\n        <div className=\"form\">\n            <input value={value} onChange={onChange} onKeyPress={onKeyPress} />\n            <div className=\"create-button\" onClick={onCreate}>\n                추가\n            </div>\n        </div>\n    );\n};\n\nexport default Form;","import React, { Component } from 'react';\nimport './TodoItem.css';\n\nclass TodoItem extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.checked !== nextProps.checked;\n    }\n\n    render() {\n        const { text, checked, id, onToggle, onRemove } = this.props;\n\n        return (\n            <div className=\"todo-item\" onClick={() => onToggle(id)}>\n                <div className=\"remove\" onClick={(e) => {\n                    e.stopPropagation();\n                    onRemove(id)}\n                }>&times;</div>\n            <div className={`todo-text ${checked && 'checked'}`}>\n                <div>{text}</div>\n            </div>\n            {\n                checked && (<div className=\"check-mark\">✓</div>)\n            }\n            </div>\n        );\n    }\n}\n\nexport default TodoItem;","import React, { Component } from 'react'\nimport TodoItem from './TodoItem';\n\nclass TodoItemList extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.todos !== nextProps.todos;\n    }\n\n    render() {\n        const { todos, onToggle, onRemove } = this.props;\n        const todoList = todos.map(\n            ({id, text, checked}) => (\n            <TodoItem\n            id={id}\n            text={text}\n            checked={checked}\n            onToggle={onToggle}\n            onRemove={onRemove}\n            key={id}\n            />\n        ));\n        \n        return (\n            <div>\n                {todoList}\n            </div>\n        );\n        // return (\n        //     <div>\n        //         <TodoItem text=\"리액트 스터디\"/>\n        //         <TodoItem text=\"ES 스터디\" />\n        //         <TodoItem text=\"Event Sourcing 스터디\" />\n        //     </div>\n        // );\n    }\n}\n\nexport default TodoItemList;","import React, { Component } from 'react';\nimport TodoListTemplates from './components/TodoListTemplates';\nimport Form from './components/form';\nimport './index.css';\nimport TodoItemList from './components/TodoItemList';\n\nclass App extends Component {\n  id = 3;\n  state = {\n     input: '',\n     todos: [\n       { id: 0, text: ' 리액트 소개', checked: true },\n       { id: 1, text: ' ES 소개', checked: true },\n       { id: 2, text: ' Event Sourcing 소개', checked: false }\n     ]\n  };\n\n  render() {\n    const { input, todos } = this.state;\n    const {\n      handleChange,\n      handleCreate,\n      handleKeyPress,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <TodoListTemplates form={(\n        <Form\n        value={input}\n        onKeyPress={handleKeyPress}\n        onChange={handleChange}\n        onCreate={handleCreate}\n        />\n      )}>\n      <TodoItemList\n        todos={todos} \n        onToggle={handleToggle} \n        onRemove={handleRemove} />\n      </TodoListTemplates>\n    );\n  };\n\n  handleToggle = (id) => {\n    const { todos } = this.state;\n\n    const index = todos.findIndex(todo => todo.id === id);\n    const selected = todos[index];\n    const nextTodos = [...todos];\n\n    nextTodos[index] = {\n      ...selected,\n      checked: !selected.checked\n    };\n\n    this.setState({\n      todos: nextTodos\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n\n  handleCreate = (e) => {\n    const { input, todos } = this.state;\n    this.setState({\n      input: '',\n      todos: todos.concat({\n        id: this.id++,\n        text: input,\n        checked: false\n      })\n    });\n  };\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      this.handleCreate();\n    }\n  };\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    this.setState({\n      todos: todos.filter(todo => todo.id !== id)\n    });\n  };\n\n\n\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}